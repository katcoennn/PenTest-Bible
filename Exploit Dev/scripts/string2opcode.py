#!/usr/bin/env python3
"""
Author: Kathleen Coen
Date: 25 Jan 2024
Description: This Python script takes a string or text file as a command-line argument 
and converts it into a hexadecimal representation suitable for assembly language 
(x86 or x86-64) instructions. The resulting hexadecimal representation is then 
printed in a format that might be used as part of an assembly language instruction.
"""

import re
import os
import sys

# Colors
RED = "\x1B[1;31m"
BLU = "\x1B[1;34m"
GRE = "\x1B[1;32m"
RST = "\x1B[0;0;0m"

# Lambda functions for colored messages
info_message = lambda x: '{}[*]{} {}'.format(BLU, RST, x)
suce_message = lambda x: '{}[+]{} {}'.format(GRE, RST, x)
erro_message = lambda x: '{}[-]{} {}'.format(RED, RST, x)

def get_user_input():
    try:
        if sys.argv[1] in ('-r', '--raw'):
            return sys.argv[2]
        elif sys.argv[1] in ('-f', '--file'):
            file_path = sys.argv[2]
            if os.path.isfile(file_path):
                print(info_message('File found'))
            else:
                print(erro_message('File not found'))
                sys.exit()
            with open(file_path, 'r') as file:
                return file.read()
        else:
            while True:
                user_input = input('Your string: ')
                if len(user_input) != 0:
                    return user_input

    except KeyboardInterrupt:
        print('\nHave Fun 1337\n')
        sys.exit()

def get_badchars():
    try:
        badchar_input = input("{}[*]{} Badchars: ".format(BLU, RST))
        return badchar_input.split('\\x')[1:]

    except KeyboardInterrupt:
        print('\nHave Fun 1337\n')
        sys.exit()

def convert_to_opcode(message, badchars):
    hexchain = ''.join([octet.encode('hex') + '20' for octet in message.split(' ')])  # Convert to hex and add spaces
    hexchain += '20' * (8 - len(hexchain) % 8)  # Add spaces to make length divisible by 8

    reverse = ''.join(re.findall('..', hexchain))[::-1]  # Reverse the hex chain

    print(suce_message('Hexchain length: {} bytes'.format(len(hexchain))))
    print(suce_message('Hexchain: :\n\n{}\n'.format(reverse)))
    print(suce_message('Your Opcode: \n'))

    detected = []
    have_bads = False

    for chunk in re.findall('........', reverse):
        decoded_chunk = chunk.decode('hex')

        for badchar in badchars:
            if badchar in chunk:
                if badchar not in detected:
                    detected.append(badchar)
                have_bads = True
                chunk = re.sub(badchar, RED + badchar + RST, chunk)

        decoded_chunk = re.sub('\\n', '\\\\n', decoded_chunk)
        decoded_chunk = re.sub('\\r', '\\\\r', decoded_chunk)
        print('push 0x{} ; {}'.format(chunk, decoded_chunk))

    print('')
    if have_bads:
        bad_chars_str = '\\x{}'.format('\\x'.join(detected))
        print(erro_message('Badchars detected: {}'.format(bad_chars_str)))
    else:
        print(suce_message('No Badchars detected'))

    print(info_message('Have Fun 1337'))
    sys.exit()

if __name__ == "__main__":
    print(info_message('Convert string to Opcode (v1.0)'))
    print(info_message('Author {}Kathleen Coen{}\n'.format(RED, RST))

    if len(sys.argv) < 3:
        print(info_message('Usage: python {} [options] <values>'.format(sys.argv[0])))
        print(info_message('Options: '))
        print('\t -f; --file\t Convert string(s) in a given file')
        print('\t -r; --raw\t Convert the given string in argument')
        print('')
        print(info_message('Usage Examples: '))
        print('\t python {} --file test.txt'.format(sys.argv[0]))
        print('\t python {} --file /root/Desktop/test.txt'.format(sys.argv[0]))
        print('\t python {} --raw lulzing'.format(sys.argv[0]))
        print('\t python {} --raw \'Opcode to OP\''.format(sys.argv[0]))
        print('')
        print(info_message('Badchars Examples: '))
        print('\t Badchars: \\x41')
        print('\t Badchars: \\x00\\x0a\\x0d\\x20')
        sys.exit()

    user_input = get_user_input()
    badchars = get_badchars()
    convert_to_opcode(user_input, badchars)

# To run this script, provide a string or strings from a file as a command-line argument. For example:
# python script.py --raw "Hello, World!"
# python script.py --file input.txt

